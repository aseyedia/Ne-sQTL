mutate(tot = cumsum(as.numeric(chr_len)) - chr_len) %>%
dplyr::select(-chr_len) %>%
# Add this info to the initial dataset
left_join(results_to_plot, ., by = c("chrom" = "chrom")) %>%
# Add a cumulative position of each SNP
arrange(chrom, var_start) %>%
mutate(BPcum = var_start + tot) %>%
mutate(ital_symbol = paste0("italic(", symbol_dedup, ")"))
axisdf <- don %>% group_by(chrom) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, symbol %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = subset(filter(don, adj_p < 5e-8), symbol_dedup != ""), fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(yintercept = -log10(5e-8), lty = "dashed", color = "gray")
plot_grid(plot_grid(ascertainment_plot, NULL, sqtl_count_plot, rel_widths = c(1.05, 0.1, 1), labels = c("A", "", "B"), nrow = 1),
NULL,
plot_grid(NULL, manhattan_plot, rel_widths = c(0.0175, 1)),
nrow = 3, align = "h", labels = c("", "", "C"), rel_heights = c(1, 0.05, 1), axis = "tb")
don <- results_to_plot %>%
setorder(chrom, var_start) %>%
# Compute chromosome size
group_by(chrom) %>%
summarise(chr_len = max(var_start)) %>%
# Calculate cumulative position of each chromosome
mutate(tot = cumsum(as.numeric(chr_len)) - chr_len) %>%
dplyr::select(-chr_len) %>%
# Add this info to the initial dataset
left_join(results_to_plot, ., by = c("chrom" = "chrom")) %>%
# Add a cumulative position of each SNP
arrange(chrom, var_start) %>%
mutate(BPcum = var_start + tot) %>%
mutate(ital_symbol = paste0("italic(", symbol_dedup, ")"))
gene_list_gr <- makeGRangesFromDataFrame(gene_list, keep.extra.columns = T)
count_sqtl <- function(tissue, summarize = FALSE, select_neand = TRUE) {
# gtp <- fread(paste0("/scratch/groups/rmccoy22/aseyedi2/sQTLv8/data/GTEx_Analysis_v8_sQTL", tissue, "_permutation_table_NE.txt"))
gtp <- fread(paste0("C:/Users/artas/Desktop/permpass/", tissue, "_permutation_table_NE.txt"))
# neand <- fread("/scratch/groups/rmccoy22/aseyedi2/sQTLv8/sprime/sprime_calls.txt")[vindija_match == "match" | altai_match == "match"] %>%
neand <- fread("C:/Users/artas/Desktop/sprime_calls.txt")[vindija_match == "match" | altai_match == "match"] %>%
mutate(., var_id_1 = paste(CHROM, POS, REF, ALT, "b38", sep = "_")) %>%
as.data.table()
gtp[, is_neand := variant_id %in% neand$var_id]
gtp_neand_t <- gtp[is_neand == TRUE]
gtp_neand_f <- gtp[is_neand == FALSE]
gtp_neand_t[, logP := -log10(pval_nominal)]
setorder(gtp_neand_t, logP)
gtp_neand_t[, expectedP := rev(-log10(ppoints(n = length(gtp_neand_t$pval_nominal))))]
gtp_neand_f[, logP := -log10(pval_nominal)]
setorder(gtp_neand_f, logP)
gtp_neand_f[, expectedP := rev(-log10(ppoints(n = length(gtp_neand_f$pval_nominal))))]
gtp <- rbind(gtp_neand_t, gtp_neand_f)
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp[is_neand == select_neand]), n_total = nrow(gtp)))
} else {
if (count(gtp) > 0) {
print(tissue)
return(data.table(gtp, TISSUE_ID = tissue))
}
else {
print(paste0("Tissue ", tissue, " has no samples with NL introgression."))
return(NULL)
}
}
}
tissue_names <-c("Adipose_Subcutaneous", "Adipose_Visceral_Omentum", "Adrenal_Gland", "Artery_Aorta", "Artery_Coronary", "Artery_Tibial", "Brain_Amygdala", "Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia", "Brain_Spinal_cord_cervical_c-1", "Brain_Substantia_nigra", "Breast_Mammary_Tissue", "Cells_Cultured_fibroblasts", "Cells_EBV-transformed_lymphocytes", "Colon_Sigmoid", "Colon_Transverse", "Esophagus_Gastroesophageal_Junction", "Esophagus_Mucosa", "Esophagus_Muscularis", "Heart_Atrial_Appendage", "Heart_Left_Ventricle", "Kidney_Cortex", "Liver", "Lung", "Minor_Salivary_Gland", "Muscle_Skeletal", "Nerve_Tibial", "Ovary", "Pancreas", "Pituitary", "Prostate", "Skin_Not_Sun_Exposed_Suprapubic", "Skin_Sun_Exposed_Lower_leg", "Small_Intestine_Terminal_Ileum", "Spleen", "Stomach", "Testis", "Thyroid", "Uterus", "Vagina", "Whole_Blood")
tissue_abbv <- c("ADPSBQ", "ADPVC", "ADRNLG", "ARTAORT", "ARTCRN", "ARTTBL", "BRNAMY", "BRNACC", "BRNCDT", "BRNCHB", "BRNCHA", "BRNCTXA", "BRNCTXB", "BRNHPP", "BRNHPT", "BRNNCC", "BRNPTM", "BRNSPC", "BRNSNG", "BREAST", "FIBRBLS", "LCL", "CLNSGM", "CNLTRN", "ESPGEJ", "ESPMCS", "ESPMSL", "HRTAA", "HRTLV", "KDNCTX", "LIVER", "LUNG", "SLVRYG", "MSCLSK", "NERVET", "OVARY", "PNCREAS", "PTTARY", "PRSTTE", "SKINNS", "SKINS", "SNTTRM", "SPLEEN", "STMACH", "TESTIS", "THYROID", "UTERUS", "VAGINA", "WHLBLD")
names(tissue_names) <- tissue_abbv
sqtl_counts_by_tissue <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize=TRUE)))
sqtl_counts_by_tissue[, n_samples := c(581,469,233,387,213,584,129,147,194,175,209,205,175,165,170,202,170,126,114,396,483,147,318,368,330,497,465,372,386,73,208,515,144,706,532,167,305,237,221,517,605,174,227,324,322,574,129,141,670)]
tissue_table <- data.table(TISSUE_ID = tissue_names, SAMPLE_SIZE = c(763,564,275,450,253,770,177,213,291,263,298,325,425,243,236,277,232,182,164,480,527,192,389,432,401,622,559,452,689,100,251,867,181,1132,722,195,360,301,262,638,849,193,260,381,406,812,166,173,3288))
tissue_gtp <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x)))
tissue_gtp <- merge(tissue_gtp, tissue_table, "TISSUE_ID")
gene_list <- rtracklayer::import("C:/Users/artas/Desktop/gencode.v26.GRCh38.genes.gtf") %>%
makeGRangesFromDataFrame(., keep.extra.columns = T) %>%
as.data.table()
gene_list <- gene_list[type == "gene" & gene_type == "protein_coding"]
gene_list[, subjectHits := .I]
gene_list_gr <- makeGRangesFromDataFrame(gene_list, keep.extra.columns = T)
dplyr::select(head(tissue_gtp[is_neand == TRUE], 100), phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name)
dplyr::select(head(tissue_gtp[is_neand == TRUE], 100), phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name)
dplyr::select(tissue_gtp[is_neand == TRUE] phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name)
dplyr::select(tissue_gtp[is_neand == TRUE], phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name)
tissue_gtp
results_to_plot <- dplyr::select(tissue_gtp[is_neand == TRUE], phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name)
setorder(results_to_plot, pval_nominal)
results_to_plot[, symbol_dedup := ""]
?set
library(data.table)
library(tidyverse)
library(pbapply)
library(pals)
library(qqman)
library(cowplot)
library(ggplotify)
library(ggrepel)
library(RColorBrewer)
library(rtracklayer)
count_sqtl <- function(tissue, summarize = FALSE, select_neand = TRUE) {
# gtp <- fread(paste0("/scratch/groups/rmccoy22/aseyedi2/sQTLv8/data/GTEx_Analysis_v8_sQTL", tissue, "_permutation_table_NE.txt"))
gtp <- fread(paste0("C:/Users/artas/Desktop/permpass/", tissue, "_permutation_table_NE.txt"))
# neand <- fread("/scratch/groups/rmccoy22/aseyedi2/sQTLv8/sprime/sprime_calls.txt")[vindija_match == "match" | altai_match == "match"] %>%
neand <- fread("C:/Users/artas/Desktop/sprime_calls.txt")[vindija_match == "match" | altai_match == "match"] %>%
mutate(., var_id_1 = paste(CHROM, POS, REF, ALT, "b38", sep = "_")) %>%
as.data.table()
gtp[, is_neand := variant_id %in% neand$var_id]
gtp_neand_t <- gtp[is_neand == TRUE]
gtp_neand_f <- gtp[is_neand == FALSE]
gtp_neand_t[, logP := -log10(pval_nominal)]
setorder(gtp_neand_t, logP)
gtp_neand_t[, expectedP := rev(-log10(ppoints(n = length(gtp_neand_t$pval_nominal))))]
gtp_neand_f[, logP := -log10(pval_nominal)]
setorder(gtp_neand_f, logP)
gtp_neand_f[, expectedP := rev(-log10(ppoints(n = length(gtp_neand_f$pval_nominal))))]
gtp <- rbind(gtp_neand_t, gtp_neand_f)
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp[is_neand == select_neand]), n_total = nrow(gtp)))
} else {
if (count(gtp) > 0) {
print(tissue)
return(data.table(gtp, TISSUE_ID = tissue))
}
else {
print(paste0("Tissue ", tissue, " has no samples with NL introgression."))
return(NULL)
}
}
}
tissue_names <-c("Adipose_Subcutaneous", "Adipose_Visceral_Omentum", "Adrenal_Gland", "Artery_Aorta", "Artery_Coronary", "Artery_Tibial", "Brain_Amygdala", "Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia", "Brain_Spinal_cord_cervical_c-1", "Brain_Substantia_nigra", "Breast_Mammary_Tissue", "Cells_Cultured_fibroblasts", "Cells_EBV-transformed_lymphocytes", "Colon_Sigmoid", "Colon_Transverse", "Esophagus_Gastroesophageal_Junction", "Esophagus_Mucosa", "Esophagus_Muscularis", "Heart_Atrial_Appendage", "Heart_Left_Ventricle", "Kidney_Cortex", "Liver", "Lung", "Minor_Salivary_Gland", "Muscle_Skeletal", "Nerve_Tibial", "Ovary", "Pancreas", "Pituitary", "Prostate", "Skin_Not_Sun_Exposed_Suprapubic", "Skin_Sun_Exposed_Lower_leg", "Small_Intestine_Terminal_Ileum", "Spleen", "Stomach", "Testis", "Thyroid", "Uterus", "Vagina", "Whole_Blood")
tissue_abbv <- c("ADPSBQ", "ADPVC", "ADRNLG", "ARTAORT", "ARTCRN", "ARTTBL", "BRNAMY", "BRNACC", "BRNCDT", "BRNCHB", "BRNCHA", "BRNCTXA", "BRNCTXB", "BRNHPP", "BRNHPT", "BRNNCC", "BRNPTM", "BRNSPC", "BRNSNG", "BREAST", "FIBRBLS", "LCL", "CLNSGM", "CNLTRN", "ESPGEJ", "ESPMCS", "ESPMSL", "HRTAA", "HRTLV", "KDNCTX", "LIVER", "LUNG", "SLVRYG", "MSCLSK", "NERVET", "OVARY", "PNCREAS", "PTTARY", "PRSTTE", "SKINNS", "SKINS", "SNTTRM", "SPLEEN", "STMACH", "TESTIS", "THYROID", "UTERUS", "VAGINA", "WHLBLD")
names(tissue_names) <- tissue_abbv
sqtl_counts_by_tissue <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize=TRUE)))
sqtl_counts_by_tissue[, n_samples := c(581,469,233,387,213,584,129,147,194,175,209,205,175,165,170,202,170,126,114,396,483,147,318,368,330,497,465,372,386,73,208,515,144,706,532,167,305,237,221,517,605,174,227,324,322,574,129,141,670)]
tissue_table <- data.table(TISSUE_ID = tissue_names, SAMPLE_SIZE = c(763,564,275,450,253,770,177,213,291,263,298,325,425,243,236,277,232,182,164,480,527,192,389,432,401,622,559,452,689,100,251,867,181,1132,722,195,360,301,262,638,849,193,260,381,406,812,166,173,3288))
tissue_gtp <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x)))
tissue_gtp <- merge(tissue_gtp, tissue_table, "TISSUE_ID")
results_to_plot <- tissue_gtp[is_neand == TRUE]
setorder(results_to_plot, pval_nominal)
View(results_to_plot)
results_to_plot[, symbol_dedup := ""]
results_to_plot[!duplicated(gene_name), symbol_dedup := gene_name]
results_to_plot$seqnames <- as.integer(gsub('[a-zA-Z]', '', results_to_plot$seqnames))
colnames(results_to_plot)[16] <- "chrom"
genes_to_highlight <- unique(results_to_plot[pval_nominal < 5e-8]$gene_name)
genes_to_highlight <- genes_to_highlight[genes_to_highlight != ""]
don <- results_to_plot %>%
setorder(chrom, var_start) %>%
# Compute chromosome size
group_by(chrom) %>%
summarise(chr_len = max(var_start)) %>%
# Calculate cumulative position of each chromosome
mutate(tot = cumsum(as.numeric(chr_len)) - chr_len) %>%
dplyr::select(-chr_len) %>%
# Add this info to the initial dataset
left_join(results_to_plot, ., by = c("chrom" = "chrom")) %>%
# Add a cumulative position of each SNP
arrange(chrom, var_start) %>%
mutate(BPcum = var_start + tot) %>%
mutate(ital_symbol = paste0("italic(", symbol_dedup, ")"))
chrom
View(results_to_plot)
don <- results_to_plot %>%
setorder(chrom, start) %>%
# Compute chromosome size
group_by(chrom) %>%
summarise(chr_len = max(start)) %>%
# Calculate cumulative position of each chromosome
mutate(tot = cumsum(as.numeric(chr_len)) - chr_len) %>%
dplyr::select(-chr_len) %>%
# Add this info to the initial dataset
left_join(results_to_plot, ., by = c("chrom" = "chrom")) %>%
# Add a cumulative position of each SNP
arrange(chrom, start) %>%
mutate(BPcum = start + tot) %>%
mutate(ital_symbol = paste0("italic(", symbol_dedup, ")"))
axisdf <- don %>% group_by(chrom) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, symbol %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = subset(filter(don, adj_p < 5e-8), symbol_dedup != ""), fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(yintercept = -log10(5e-8), lty = "dashed", color = "gray")
View(don)
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = subset(filter(don, adj_p < 5e-8), symbol_dedup != ""), fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(yintercept = -log10(5e-8), lty = "dashed", color = "gray")
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = subset(filter(don, pval_nominal), symbol_dedup != ""), fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(lty = "dashed", color = "gray")
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = subset(filter(don, pval_nominal), symbol_dedup != ""), fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(yintercept = -log10(5e-8), lty = "dashed", color = "gray")
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = subset(don$pval_nominal, symbol_dedup != ""), fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(yintercept = -log10(5e-8), lty = "dashed", color = "gray")
View(don)
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
) +
geom_text_repel(data = don$gene_name, fontface = "italic", size = 3.5, hjust = -0.1, vjust = 0.1, point.padding = NA) +
xlab("Chromosome") +
ylab(expression(-log[10](italic(p)))) +
geom_hline(yintercept = -log10(5e-8), lty = "dashed", color = "gray")
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
)
View(manhattan_plot)
View(manhattan_plot)
ggplot(don, aes(x = BPcum, y = -log10(adj_p), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
)
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(pval_nominal), label = symbol_dedup)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
)
manhattan_plot <- ggplot(don, aes(x = BPcum, y = -log10(pval_nominal), label = gene_name)) +
# Show all points
geom_point(aes(color = as.factor(chrom)), alpha = 0.8, size = 0.5) +
scale_color_manual(values = rep(c("black", "grey"), 22 )) +
geom_point(data = subset(don, gene_name %in% genes_to_highlight), color = "red", size = 0.6) +
# custom X axis:
scale_x_continuous( label = axisdf$chrom, breaks = axisdf$center ) +
scale_y_continuous(expand = c(0, 1)) +     # remove space between plot area and x axis
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid = element_blank()
)
library(data.table)
library(tidyverse)
# args = commandArgs(trailingOnly=TRUE)
# Horizontalize
dt <- fread("Whole_Blood_NL_isos.txt") %>%
mutate(counts = counts %>% as.character(),
nrows = nrows %>% as.character()) %>%
unite("result",counts,nrows,sep = ";") %>%
pivot_wider(names_from = is_NL,values_from = result) %>%
as.data.table()
setwd("GitHub/neand_sQTL/")
library(data.table)
library(tidyverse)
# args = commandArgs(trailingOnly=TRUE)
# Horizontalize
dt <- fread("Whole_Blood_NL_isos.txt") %>%
mutate(counts = counts %>% as.character(),
nrows = nrows %>% as.character()) %>%
unite("result",counts,nrows,sep = ";") %>%
pivot_wider(names_from = is_NL,values_from = result) %>%
as.data.table()
tissue_name <- gsub("^([^_]*_[^_]*)_.*$", "\\1", "Whole_Blood_NL_isos.txt")
colnames(dt) <- c("variant_id", "transcript_id", "individual", "HH", "HN", "NN")
dt
na.omit(dt)
dt
dt <- fread("Whole_Blood_NL_isos.txt") %>%
mutate(counts = counts %>% as.character(),
nrows = nrows %>% as.character()) %>%
unite("result",counts,nrows,sep = ";") %>%
pivot_wider(names_from = is_NL,values_from = result) %>%
as.data.table()
library(data.table)
library(mygene)
library(ggplot2)
library(RDAVIDWebService)
library(biomaRt)
test <- fread("results/loosenedRestrictionsGenes.txt")
ensembl_id <- gsub("\\..*","",test$gene_id)
david <- DAVIDWebService$new(email="aseyedi2@jhu.edu", url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
result <- addList(david, ensembl_id, idType = "ENSEMBL_GENE_ID", listName = "NL_genes", listType = "Gene")
setAnnotationCategories(david, c("GOTERM_BP_ALL"))
termCluster<-getClusterReport(david, type="Term")
plot2D(termCluster, 1)
termCluster
plot2D(termCluster, 2)
plot2D(termCluster, 3)
plot2D(termCluster, 2)
plot2D(termCluster, 3)
plot2D(termCluster, 4)
library(data.table)
library(mygene)
library(ggplot2)
library(RDAVIDWebService)
library(biomaRt)
test <- fread("results/loosenedRestrictionsGenes.txt")
ensembl_id <- gsub("\\..*","",test$gene_id)
david <- DAVIDWebService$new(email="aseyedi2@jhu.edu", url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
result <- addList(david, ensembl_id, idType = "ENSEMBL_GENE_ID", listName = "NL_genes", listType = "Gene")
setAnnotationCategories(david, c("GOTERM_BP_ALL"))
termCluster<-getClusterReport(david, type="Term")
plot2D(termCluster, 1)
termCluster
termCluster[1]
termCluster
?getClusterReport
termCluster[[1]]
members(termCluster)
members(termCluster)[[1]]
as.data.table(members(termCluster)[[1]])
members(termCluster)[[1]]
members(termCluster)[[1]]$genes
str(members(termCluster)[[1]])
str(members(termCluster)[[1]])
members(termCluster)[[1]]
?members
str(termCluster)
cluster(termCluster)
enrichment(termCluster)
cluster(termCluster)
cluster(termCluster)[[1]]
str(cluster(termCluster)[[1]])
cluster(termCluster)[[1]][[1]]
cluster(termCluster)[[1]][[2]]
str(cluster(termCluster)[[1]][[2]])
members(termCluster)[[1]][[2]]
members(termCluster)[[1]][[1]]
members(termCluster)[[1]][[3]]
members(termCluster)[[1]][[4]]
members(termCluster)[[1]][[5]]
members(termCluster)[[1]][[6]]
members(termCluster)[[1]][[6]][6]
# List of genes in cluster 1
#
strsplit(members(termCluster)[[1]][[6]][6], split=", ")))
# List of genes in cluster 1
#
strsplit(members(termCluster)[[1]][[6]][6], split=", ")
# List of genes in cluster 1
#
unlist(strsplit(members(termCluster)[[1]][[6]][6], split=", "))
?biomart
??biomart
listFilters
?listFilters
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
?listAttributes
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id",
"description"),values=genes,mart= mart)
mart
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "description"),values=genes,mart= mart)
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "description"),values=ensembl_genes,mart= mart)
# List of genes in cluster 1
#
ensembl_genes <- unlist(strsplit(members(termCluster)[[1]][[6]][6], split=", "))
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "description"),values=ensembl_genes,mart= mart)
G_list
?listAttributes
listAttributes
listAttributes()
listAttributes(mart)
grep(listAttributes(mart), "symbol")
listAttributes(mart)
listAttributes(mart)$description
listAttributes(mart)$description
?grep
grep("symbol), listAttributes(mart)$description)
grep("symbol), listAttributes(mart)$description))
grep("symbol", listAttributes(mart)$description)
grep("symbol", listAttributes(mart)$description, value = T)
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","HGNC symbol", "description"),values=ensembl_genes,mart= mart)
listAttributes(mart)$description
listAttributes(mart)
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_id", "description"),values=ensembl_genes,mart= mart)
G_list
grep("symbol", listAttributes(mart)$description, value = T)
grep("symbol", listAttributes(mart)$description)
listAttributes(mart)[96,]
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","uniprot_gn_symbol", "description"),values=ensembl_genes,mart= mart)
G_list
write.table(G_list,
file = paste0("results/NL_Iso_TopGenes_List.txt"),
sep = "\t",
row.names = F,
quote = FALSE)
getwd()
