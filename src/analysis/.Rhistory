# This program is to read and merge the neanderthal rsID data with the tissue sQTL data derived
# from using altrans on gTEX
library(data.table)
library(dplyr)
# args[1] will be the tissue file
# args[2] will be the neanderthal file
# args[3] maybe will be $SLURM_ARRAY_TASK_ID
# args = commandArgs(trailingOnly=TRUE)
f1 <- fread("AdiposeSubcutaneous.Altrans.bestPerLink")
f2 <- fread("file:///D:/neanderthal_foolinaround/matches/EASmatch.txt", fill=TRUE)
f2 <- f2[Num != 'PosID' | PosID != 'rsID']
f1 <- f1[,-c(2,3)]
f2 <- f2[,-c("Num")]
colnames(f1)[colnames(f1)=="Variation"] <- "rsID"
merge_data <- merge(f2, f1, by = "rsID")
# merge_data <- merge(f2, f1[,c("Variation", "Direction", "Spearman_rho", "log10(p)")], rsID, by = "PosID")
library(data.table)
# unzip(zipfile = "rprog_data_specdata.zip")
allfiles <- list.files(path = "specdata/", pattern = "*.csv")
fulldata <- lapply(allfiles, read.csv)
onetable <- rbindlist(fulldata)
getwd()
myvector = c(36, TRUE, "Foo")
myvector = c(36, TRUE)
vector = c(5, 25, 34, 1234)
vector
matrix = ("Cool", 3, 3)
string <- "cool"
matrix <- (string, 3, 3)
matrix("cool", 3, 3)
range <- 1:100
sum(range)
matrix(rexp(200, rate=.1), ncol=20)
matrix(rexp(200, rate=1), ncol=20)
matrix(rexp(200, rate=.01), ncol=20)
random <- matrix(rexp(200, rate=.01), ncol=20)
plot(random)
png()
plot(random)
dev.off()
getwd()
source("count_sqtl.R")
getwd()
setwd("D:/github/neand_sQTL/src/analysis/")
source("count_sqtl.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
<<<<<<< Updated upstream
source("count_sqtl_fxn.R")
count_sqtl <- function(tissue, summarize = FALSE, perm = TRUE) {
if(perm = TRUE) {
=======
?uniqe
?unique
topGenes <- dplyr::select(head(tissue_gtp, 500), phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name) %>%
unique(.)
library(data.table)
library(tidyverse)
library(pbapply)
library(ggrepel)
library(annotate)
library(org.Hs.eg.db)
library(rtracklayer)
topGenes <- dplyr::select(head(tissue_gtp, 500), phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name) %>%
unique(.)
tissue_gtp <-  do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize = FALSE))) %>%
setorder(., pval_nominal)
library(data.table)
library(tidyverse)
library(pbapply)
library(ggrepel)
library(annotate)
library(org.Hs.eg.db)
library(rtracklayer)
setwd("/Users/aseyedia/Documents/GitHub/neand_sQTL/src/analysis/")
count_sqtl <- function(tissue, summarize = FALSE) {
>>>>>>> Stashed changes
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
}
else {
<<<<<<< Updated upstream
gtp <- fread(paste0(tissue, ".v8.sqtl_allpairs.txt.gz"))
}
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
return(data.table(gtp, TISSUE_ID = tissue))
}
}
count_sqtl <- function(tissue, summarize = FALSE, perm = TRUE) {
if(perm == TRUE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
}
else {
gtp <- fread(paste0(tissue, ".v8.sqtl_allpairs.txt.gz"))
}
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
return(data.table(gtp, TISSUE_ID = tissue))
}
}
library(pbapply)
?pbapply
?pbmapply
library(parallel)
?parallel::mclapply()
?parallel::mclapply()
=======
return(data.table(gtp, TISSUE_ID = tissue))
}
}
tissue_names <-c("Adipose_Subcutaneous", "Adipose_Visceral_Omentum", "Adrenal_Gland", "Artery_Aorta", "Artery_Coronary", "Artery_Tibial", "Brain_Amygdala", "Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia", "Brain_Spinal_cord_cervical_c-1", "Brain_Substantia_nigra", "Breast_Mammary_Tissue", "Cells_Cultured_fibroblasts", "Cells_EBV-transformed_lymphocytes", "Colon_Sigmoid", "Colon_Transverse", "Esophagus_Gastroesophageal_Junction", "Esophagus_Mucosa", "Esophagus_Muscularis", "Heart_Atrial_Appendage", "Heart_Left_Ventricle", "Kidney_Cortex", "Liver", "Lung", "Minor_Salivary_Gland", "Muscle_Skeletal", "Nerve_Tibial", "Ovary", "Pancreas", "Pituitary", "Prostate", "Skin_Not_Sun_Exposed_Suprapubic", "Skin_Sun_Exposed_Lower_leg", "Small_Intestine_Terminal_Ileum", "Spleen", "Stomach", "Testis", "Thyroid", "Uterus", "Vagina", "Whole_Blood")
tissue_abbv <- c("ADPSBQ", "ADPVC", "ADRNLG", "ARTAORT", "ARTCRN", "ARTTBL", "BRNAMY", "BRNACC", "BRNCDT", "BRNCHB", "BRNCHA", "BRNCTXA", "BRNCTXB", "BRNHPP", "BRNHPT", "BRNNCC", "BRNPTM", "BRNSPC", "BRNSNG", "BREAST", "FIBRBLS", "LCL", "CLNSGM", "CNLTRN", "ESPGEJ", "ESPMCS", "ESPMSL", "HRTAA", "HRTLV", "KDNCTX", "LIVER", "LUNG", "SLVRYG", "MSCLSK", "NERVET", "OVARY", "PNCREAS", "PTTARY", "PRSTTE", "SKINNS", "SKINS", "SNTTRM", "SPLEEN", "STMACH", "TESTIS", "THYROID", "UTERUS", "VAGINA", "WHLBLD")
names(tissue_names) <- tissue_abbv
sqtl_counts_by_tissue <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize=TRUE)))
sqtl_counts_by_tissue[, n_samples := c(763,564,275,450,253,770,177,213,291,263,298,325,425,243,236,277,232,182,164,480,527,192,389,432,401,622,559,452,689,100,251,867,181,1132,722,195,360,301,262,638,849,193,260,381,406,812,166,173,3288)]
tissue_gtp <-  do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize = FALSE))) %>%
setorder(., pval_nominal)
topGenes <- dplyr::select(head(tissue_gtp, 500), phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name) %>%
unique(.)
topGenes <- dplyr::select(head(tissue_gtp, 500), phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name) %>%
unique(.)
View(topGenes)
table(topGenes)
table(tissue_gtp$gene_name)
write.csv(topGenes, file = "TopGenes_PermPass.csv", eol = "\r\n", row.names = F)
topGenes <- dplyr::select(tissue_gtp, phenotype_id, variant_id, TISSUE_ID, pval_nominal, gene_name) %>%
unique(.)
write.csv(topGenes, file = "TopGenes_PermPass.csv", eol = "\r\n", row.names = F)
>>>>>>> Stashed changes
install.packages(c("cowplot", "ggplotify", "pals"))
