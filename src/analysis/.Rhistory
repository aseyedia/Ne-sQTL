# This program is to read and merge the neanderthal rsID data with the tissue sQTL data derived
# from using altrans on gTEX
library(data.table)
library(dplyr)
# args[1] will be the tissue file
# args[2] will be the neanderthal file
# args[3] maybe will be $SLURM_ARRAY_TASK_ID
# args = commandArgs(trailingOnly=TRUE)
f1 <- fread("AdiposeSubcutaneous.Altrans.bestPerLink")
f2 <- fread("file:///D:/neanderthal_foolinaround/matches/EASmatch.txt", fill=TRUE)
f2 <- f2[Num != 'PosID' | PosID != 'rsID']
f1 <- f1[,-c(2,3)]
f2 <- f2[,-c("Num")]
colnames(f1)[colnames(f1)=="Variation"] <- "rsID"
merge_data <- merge(f2, f1, by = "rsID")
# merge_data <- merge(f2, f1[,c("Variation", "Direction", "Spearman_rho", "log10(p)")], rsID, by = "PosID")
library(data.table)
# unzip(zipfile = "rprog_data_specdata.zip")
allfiles <- list.files(path = "specdata/", pattern = "*.csv")
fulldata <- lapply(allfiles, read.csv)
onetable <- rbindlist(fulldata)
getwd()
myvector = c(36, TRUE, "Foo")
myvector = c(36, TRUE)
vector = c(5, 25, 34, 1234)
vector
matrix = ("Cool", 3, 3)
string <- "cool"
matrix <- (string, 3, 3)
matrix("cool", 3, 3)
range <- 1:100
sum(range)
matrix(rexp(200, rate=.1), ncol=20)
matrix(rexp(200, rate=1), ncol=20)
matrix(rexp(200, rate=.01), ncol=20)
random <- matrix(rexp(200, rate=.01), ncol=20)
plot(random)
png()
plot(random)
dev.off()
getwd()
source("count_sqtl.R")
getwd()
setwd("D:/github/neand_sQTL/src/analysis/")
source("count_sqtl.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
source("count_sqtl_fxn.R")
count_sqtl <- function(tissue, summarize = FALSE, perm = TRUE) {
if(perm = TRUE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
}
else {
gtp <- fread(paste0(tissue, ".v8.sqtl_allpairs.txt.gz"))
}
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
return(data.table(gtp, TISSUE_ID = tissue))
}
}
count_sqtl <- function(tissue, summarize = FALSE, perm = TRUE) {
if(perm == TRUE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
}
else {
gtp <- fread(paste0(tissue, ".v8.sqtl_allpairs.txt.gz"))
}
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
return(data.table(gtp, TISSUE_ID = tissue))
}
}
library(pbapply)
?pbapply
?pbmapply
library(parallel)
?parallel::mclapply()
?parallel::mclapply()
