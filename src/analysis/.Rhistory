install.packages(c(
"shiny", "DT", "shinycssloaders", "shinyjs", "dplyr", "ggplot2", "leafcutter", "reshape2", "gridExtra", "intervals", "foreach", "grid", "gtable", "ggrepel", "ggbeeswarm", "stringr"
))
install.packages("leafcutter")
install.packages("grid")
library(data.table)
d <- fread("bds-files/chapter-08-r/Dataset_S1.txt")
names(d) <- gsub(" ", ".", names(d))
colnames(d)[12] <- "percent.gc"
d[ , 1:2]
d[, c("start", "end")]
#These both do the same thing; first two columns, every row.
d[1, c("start", "end")]
#First row of those two columns.
d[1, ]
#First row of every column
d[2,3]
#Single cell
d[, "start", drop=F]
#Drop allows you to keep the column as a dataframe or what have you if only accessing one column.
d$cent <- d$start >= 25800000 & d$end <= 29700000
#Creates a column called  cent  of just  T/F  values indicating whether the current window is fully within the centromeric region.
table(d$cent)
#Tallies  T/F  values.
sum(d$cent)
#Add values of column.
d[d$total.SNPs >= 85, ]
#Extracts rows which return `TRUE` for `d$total.SNPs >= 85`
d[d$Pi >16 & d$percent.gc > 80, ]
#Same as above but for two different columns.
d[d$Pi > 16 & d$percent.gc > 80, c("start", "end", "depth", "Pi")]
#Extracts rows only in the specified columns which meet the criteria. You can also reorder the columns by providing their names in a different order.
d$percent.gc[d$Pi >16]
#Returns the subsetted column as a vector.
#The function `which()` takes a vector of logical values and returns the positions of all `TRUE` values. Ex:
d$Pi > 3
#`F F T F etc...`
which(d$Pi >3)
#`2 4 5 6 9 etc...`
#Therefore, `d[d$Pi >3, ]` is equivalent to `d[which(d$Pi > 3)]`;
which(d$Pi >10)[1:4]
#`2 16 21 23`
#Selects the four first `TRUE` values in a vector.
# `which.min()` and `which.max()` returns the index of the first min or max element of a vector.
d[d$Pi > 16 & d$percent.gc > 80, ] #is equivalent to
subset(d, Pi > 16 & percent.gc > 80)
# A third optional argument in subset() can be added to specify which columns and in what order to include.
library(ggplot2)
#The diversity estimates (Theta, Pi, Heterozygosity) are all scaled up by 10x in the dataset.
# d$diversity is the per basepair nucleotide diversity
d$diversity <- d$Pi / (10*1000)
# midpoint between each window
d$position <- (d$end + d$start) / 2
ggplot(d) + geom_point(aes(x=position, y=diversity))
ggplot(d) + geom_point(aes(x=position, y=diversity), alpha=0.01)
ggplot(d) + geom_density(aes(x=diversity), fill="black")
ggplot(d) + geom_density(aes(x=diversity, fill=cent), alpha=0.4)
ggplot(d, aes(x=depth, y=total.SNPs)) + geom_point() + geom_smooth()
ggplot(d, aes(x=percent.gc, y=depth)) + geom_point() + geom_smooth()
adh <- list(chr="2L", start=14615555L, end=14618902L, name="Adh")
adh
str(adh)
lapply(ll, mean)
ll <- list(a=rnorm(6, mean=1), b=rnorm(6, mean=4), c=rnorm(6, mean=6))
ll
# create an empty numeric vector for the means
ll_means <- numeric(length(ll))
for (i in seq_along(ll)){
ll_means[i] <- mean(ll[[i]])
}
lapply(ll, mean)
?slowFunction
library(parallel)
results <- mclapply(my_samples, slowFunction)
?slowFunction
install.packages("qqman")
?mutate
library(data.table)
library(tidyverse)
library(Homo.sapiens)
library(qqman)
library(qvalue)
?mutate
?strsplit
?makeGRangesFromDataFrame
?colnames
library(org.Hs.eg.db)
snakemake@input[["perm"]]
?getsymbol
?getSYMBOL
library(annotate)
install.packages("annotate")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
?rbind
?mutate
d_split <- split(d$depth, d$GC.binned)
d$gc.binned <- cut(d$percent.gc, 5)
d$gc.binned
d_split <- split(d$depth, d$gc.binned)
str(d_split)
?split
unlist(lapply(d_split, mean))
library(tidyr)
library(dplyr)
library(data.table)
introns <-
fread(
"GTEx_v8_junctions_nohead.gct.gz",
stringsAsFactors = FALSE,
header = TRUE
)
tistab <- fread("../../metadata/tissue_key.csv")
sites <- with(tistab, split(SAMPID, TISSUE))
getwd()
setwd("/Users/aseyedia/Documents/GitHub/neand_sQTL/src/analysis/")
setwd("/Users/aseyedia/Documents/GitHub/neand_sQTL/src/analysis/")
introns <-
fread(
"GTEx_v8_junctions_nohead.gct.gz",
stringsAsFactors = FALSE,
header = TRUE
)
tistab <- fread("../../metadata/tissue_key.csv")
