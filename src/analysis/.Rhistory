install.packages(c(
"shiny", "DT", "shinycssloaders", "shinyjs", "dplyr", "ggplot2", "leafcutter", "reshape2", "gridExtra", "intervals", "foreach", "grid", "gtable", "ggrepel", "ggbeeswarm", "stringr"
))
install.packages("leafcutter")
install.packages("grid")
library(data.table)
d <- fread("bds-files/chapter-08-r/Dataset_S1.txt")
names(d) <- gsub(" ", ".", names(d))
colnames(d)[12] <- "percent.gc"
d[ , 1:2]
d[, c("start", "end")]
#These both do the same thing; first two columns, every row.
d[1, c("start", "end")]
#First row of those two columns.
d[1, ]
#First row of every column
d[2,3]
#Single cell
d[, "start", drop=F]
#Drop allows you to keep the column as a dataframe or what have you if only accessing one column.
d$cent <- d$start >= 25800000 & d$end <= 29700000
#Creates a column called  cent  of just  T/F  values indicating whether the current window is fully within the centromeric region.
table(d$cent)
#Tallies  T/F  values.
sum(d$cent)
#Add values of column.
d[d$total.SNPs >= 85, ]
#Extracts rows which return `TRUE` for `d$total.SNPs >= 85`
d[d$Pi >16 & d$percent.gc > 80, ]
#Same as above but for two different columns.
d[d$Pi > 16 & d$percent.gc > 80, c("start", "end", "depth", "Pi")]
#Extracts rows only in the specified columns which meet the criteria. You can also reorder the columns by providing their names in a different order.
d$percent.gc[d$Pi >16]
#Returns the subsetted column as a vector.
#The function `which()` takes a vector of logical values and returns the positions of all `TRUE` values. Ex:
d$Pi > 3
#`F F T F etc...`
which(d$Pi >3)
#`2 4 5 6 9 etc...`
#Therefore, `d[d$Pi >3, ]` is equivalent to `d[which(d$Pi > 3)]`;
which(d$Pi >10)[1:4]
#`2 16 21 23`
#Selects the four first `TRUE` values in a vector.
# `which.min()` and `which.max()` returns the index of the first min or max element of a vector.
d[d$Pi > 16 & d$percent.gc > 80, ] #is equivalent to
subset(d, Pi > 16 & percent.gc > 80)
# A third optional argument in subset() can be added to specify which columns and in what order to include.
library(ggplot2)
#The diversity estimates (Theta, Pi, Heterozygosity) are all scaled up by 10x in the dataset.
# d$diversity is the per basepair nucleotide diversity
d$diversity <- d$Pi / (10*1000)
# midpoint between each window
d$position <- (d$end + d$start) / 2
ggplot(d) + geom_point(aes(x=position, y=diversity))
ggplot(d) + geom_point(aes(x=position, y=diversity), alpha=0.01)
ggplot(d) + geom_density(aes(x=diversity), fill="black")
ggplot(d) + geom_density(aes(x=diversity, fill=cent), alpha=0.4)
ggplot(d, aes(x=depth, y=total.SNPs)) + geom_point() + geom_smooth()
ggplot(d, aes(x=percent.gc, y=depth)) + geom_point() + geom_smooth()
adh <- list(chr="2L", start=14615555L, end=14618902L, name="Adh")
adh
str(adh)
lapply(ll, mean)
ll <- list(a=rnorm(6, mean=1), b=rnorm(6, mean=4), c=rnorm(6, mean=6))
ll
# create an empty numeric vector for the means
ll_means <- numeric(length(ll))
for (i in seq_along(ll)){
ll_means[i] <- mean(ll[[i]])
}
lapply(ll, mean)
?slowFunction
library(parallel)
results <- mclapply(my_samples, slowFunction)
?slowFunction
install.packages("qqman")
?mutate
library(data.table)
library(tidyverse)
library(Homo.sapiens)
library(qqman)
library(qvalue)
?mutate
?strsplit
?makeGRangesFromDataFrame
?colnames
library(org.Hs.eg.db)
snakemake@input[["perm"]]
?getsymbol
?getSYMBOL
library(annotate)
install.packages("annotate")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
library(ggrepel)
?ggrepel
?facet_wrap
?ggplot
?aes
?function
()
?function()
count_sqtl <- function(tissue, summarize = FALSE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt")) #%>%
# setorder(., pval_nominal)
# gtp[, qval := qvalue(gtp$pval_nominal)$qvalues]
# neand <- fread("/scratch/groups/rmccoy22/aseyedi2/sQTLv8/sprime/output/sprime_calls.txt")[vindija_match == "match" | altai_match == "match"] %>%
#   mutate(., var_id = paste(CHROM, POS, REF, ALT, "b37", sep = "_")) %>%
#   as.data.table()
#
# neand <- fread(args[2])[vindija_match == "match" | altai_match == "match"] %>%
#   mutate(., var_id = paste(CHROM, POS, REF, ALT, "b37", sep = "_")) %>%
#   as.data.table()
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
#
# gtp[, is_neand := variant_id %in% neand$var_id]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
print(paste("this is", names(tissue)))
return(data.table(gtp, TISSUE_ID = tissue))
}
}
library(data.table)
library(tidyverse)
library(pbapply)
library(ggrepel)
count_sqtl <- function(tissue, summarize = FALSE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
print(paste("this is", names(tissue)))
return(data.table(gtp, TISSUE_ID = tissue))
}
}
count_sqtl <- function(tissue, summarize = FALSE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
print(paste("this is", names(tissue)))
return(data.table(gtp, TISSUE_ID = tissue))
}
}
library(data.table)
library(tidyverse)
library(pbapply)
library(ggrepel)
tissue_names <-c("Adipose_Subcutaneous", "Adipose_Visceral_Omentum", "Adrenal_Gland", "Artery_Aorta", "Artery_Coronary", "Artery_Tibial", "Brain_Amygdala", "Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia", "Brain_Spinal_cord_cervical_c-1", "Brain_Substantia_nigra", "Breast_Mammary_Tissue", "Cells_Cultured_fibroblasts", "Cells_EBV-transformed_lymphocytes", "Colon_Sigmoid", "Colon_Transverse", "Esophagus_Gastroesophageal_Junction", "Esophagus_Mucosa", "Esophagus_Muscularis", "Heart_Atrial_Appendage", "Heart_Left_Ventricle", "Kidney_Cortex", "Liver", "Lung", "Minor_Salivary_Gland", "Muscle_Skeletal", "Nerve_Tibial", "Ovary", "Pancreas", "Pituitary", "Prostate", "Skin_Not_Sun_Exposed_Suprapubic", "Skin_Sun_Exposed_Lower_leg", "Small_Intestine_Terminal_Ileum", "Spleen", "Stomach", "Testis", "Thyroid", "Uterus", "Vagina", "Whole_Blood")
tissue_abbv <- c("ADPSBQ", "ADPVC", "ADRNLG", "ARTAORT", "ARTCRN", "ARTTBL", "BRNAMY", "BRNACC", "BRNCDT", "BRNCHB", "BRNCHA", "BRNCTXA", "BRNCTXB", "BRNHPP", "BRNHPT", "BRNNCC", "BRNPTM", "BRNSPC", "BRNSNG", "BREAST", "FIBRBLS", "LCL", "CLNSGM", "CNLTRN", "ESPGEJ", "ESPMCS", "ESPMSL", "HRTAA", "HRTLV", "KDNCTX", "LIVER", "LUNG", "SLVRYG", "MSCLSK", "NERVET", "OVARY", "PNCREAS", "PTTARY", "PRSTTE", "SKINNS", "SKINS", "SNTTRM", "SPLEEN", "STMACH", "TESTIS", "THYROID", "UTERUS", "VAGINA", "WHLBLD")
names(tissue_names) <- tissue_abbv
sqtl_counts_by_tissue <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize=TRUE)))
sqtl_counts_by_tissue[, n_samples := c(763,564,275,450,253,770,177,213,291,263,298,325,425,243,236,277,232,182,164,480,527,192,389,432,401,622,559,452,689,100,251,867,181,1132,722,195,360,301,262,638,849,193,260,381,406,812,166,173,3288)]
getwd()
setwd("/Users/aseyedia/Documents/GitHub/neand_sQTL/src/analysis/")
tissue_names <-c("Adipose_Subcutaneous", "Adipose_Visceral_Omentum", "Adrenal_Gland", "Artery_Aorta", "Artery_Coronary", "Artery_Tibial", "Brain_Amygdala", "Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia", "Brain_Spinal_cord_cervical_c-1", "Brain_Substantia_nigra", "Breast_Mammary_Tissue", "Cells_Cultured_fibroblasts", "Cells_EBV-transformed_lymphocytes", "Colon_Sigmoid", "Colon_Transverse", "Esophagus_Gastroesophageal_Junction", "Esophagus_Mucosa", "Esophagus_Muscularis", "Heart_Atrial_Appendage", "Heart_Left_Ventricle", "Kidney_Cortex", "Liver", "Lung", "Minor_Salivary_Gland", "Muscle_Skeletal", "Nerve_Tibial", "Ovary", "Pancreas", "Pituitary", "Prostate", "Skin_Not_Sun_Exposed_Suprapubic", "Skin_Sun_Exposed_Lower_leg", "Small_Intestine_Terminal_Ileum", "Spleen", "Stomach", "Testis", "Thyroid", "Uterus", "Vagina", "Whole_Blood")
tissue_abbv <- c("ADPSBQ", "ADPVC", "ADRNLG", "ARTAORT", "ARTCRN", "ARTTBL", "BRNAMY", "BRNACC", "BRNCDT", "BRNCHB", "BRNCHA", "BRNCTXA", "BRNCTXB", "BRNHPP", "BRNHPT", "BRNNCC", "BRNPTM", "BRNSPC", "BRNSNG", "BREAST", "FIBRBLS", "LCL", "CLNSGM", "CNLTRN", "ESPGEJ", "ESPMCS", "ESPMSL", "HRTAA", "HRTLV", "KDNCTX", "LIVER", "LUNG", "SLVRYG", "MSCLSK", "NERVET", "OVARY", "PNCREAS", "PTTARY", "PRSTTE", "SKINNS", "SKINS", "SNTTRM", "SPLEEN", "STMACH", "TESTIS", "THYROID", "UTERUS", "VAGINA", "WHLBLD")
names(tissue_names) <- tissue_abbv
sqtl_counts_by_tissue <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize=TRUE)))
sqtl_counts_by_tissue[, n_samples := c(763,564,275,450,253,770,177,213,291,263,298,325,425,243,236,277,232,182,164,480,527,192,389,432,401,622,559,452,689,100,251,867,181,1132,722,195,360,301,262,638,849,193,260,381,406,812,166,173,3288)]
nsqtl <- ggplot(data = sqtl_counts_by_tissue, aes(x = n_samples, y = n_sqtl, label = names(tissue_names), color = TISSUE)) +
theme_bw() +
geom_point() +
ggrepel::geom_text_repel(force = 1) + # hjust = 0, nudge_x = 4, nudge_y = 2
xlim(0, 600) +
theme(panel.grid = element_blank(), legend.position = "none") +
xlab("Number of Genotyped Samples") +
ylab("Number of sQTLs")
View(nsqtl)
ggplot(data = sqtl_counts_by_tissue, aes(x = n_samples, y = n_sqtl, label = names(tissue_names), color = TISSUE)) +
theme_bw() +
geom_point() +
ggrepel::geom_text_repel(force = 1) + # hjust = 0, nudge_x = 4, nudge_y = 2
xlim(0, 600) +
theme(panel.grid = element_blank(), legend.position = "none") +
xlab("Number of Genotyped Samples") +
ylab("Number of sQTLs")
?png()
png(filename = "sQTLs_per_tissue.png")
ggplot(data = sqtl_counts_by_tissue, aes(x = n_samples, y = n_sqtl, label = names(tissue_names), color = TISSUE)) +
theme_bw() +
geom_point() +
ggrepel::geom_text_repel(force = 1) + # hjust = 0, nudge_x = 4, nudge_y = 2
xlim(0, 600) +
theme(panel.grid = element_blank(), legend.position = "none") +
xlab("Number of Genotyped Samples") +
ylab("Number of sQTLs")
dev.off()
tissue_gtp <-  do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize = FALSE)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID, label = names(tissue_names))) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
?facet_wrap
as.data.frame(names(tissue_names))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller=as.data.frame(names(tissue_names)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_grid(~ TISSUE_ID))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_grid(~ TISSUE_ID)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
?theme
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "left") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = labeller(tissue_names))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = labeller(names(tissue_names)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = as_labeller(names(tissue_names)))
names(tissue_names)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = as_labeller(tissue_abbv))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = "as_labeller(tissue_abbv)")
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = "boobs")
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = labeller(names(tissue_names)))
as.labeller(names(tissue_names)) <- tissue_abbv
sqtl_counts_by_tissue <- do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize=TRUE)))
sqtl_counts_by_tissue[, n_samples := c(763,564,275,450,253,770,177,213,291,263,298,325,425,243,236,277,232,182,164,480,527,192,389,432,401,622,559,452,689,100,251,867,181,1132,722,195,360,301,262,638,849,193,260,381,406,812,166,173,3288)]
png(filename = "sQTLs_per_tissue.png")
ggplot(data = sqtl_counts_by_tissue, aes(x = n_samples, y = n_sqtl, label = names(tissue_names), color = TISSUE)) +
theme_bw() +
geom_point() +
ggrepel::geom_text_repel(force = 1) + # hjust = 0, nudge_x = 4, nudge_y = 2
xlim(0, 600) +
theme(panel.grid = element_blank(), legend.position = "none") +
xlab("Number of Genotyped Samples") +
ylab("Number of sQTLs")
dev.off()
tissue_gtp <-  do.call(rbind, lapply(tissue_names, function(x) count_sqtl(x, summarize = FALSE)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = as.labeller(names(tissue_names)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = as_labeller(names(tissue_names)))
as_labeller(names(tissue_names)) <- tissue_abbv
names(tissue_names) <- as_labeller(tissue_abbv)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = labeller(tissue_names))
tissue_names
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = labeller(TISSUE_ID = tissue_names))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID, labeller = labeller(TISSUE_ID = names(tissue_names)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) #+
# facet_wrap(~ TISSUE_ID, labeller = labeller(TISSUE_ID
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ names(TISSUE_ID))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
count_sqtl <- function(tissue, summarize = FALSE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
return(data.table(gtp, TISSUE_ID = tissue))
}
}
?lapply
?sapply
tissue_gtp <-  do.call(rbind, sapply(tissue_names, function(x) count_sqtl(x, summarize = FALSE), USE.NAMES = TRUE, simplify = F))
tissue_gtp
?mapply
count_sqtl <- function(tissue, tissue_names, summarize = FALSE) {
gtp <- fread(paste0(tissue, "_permutation_table_NE.txt"))
gtp[, logP := -log10(pval_nominal)]
setorder(gtp, logP)
gtp[, expectedP := rev(-log10(ppoints(n = length(gtp$pval_nominal))))]
if (summarize == TRUE) {
return(data.table(TISSUE = tissue, n_sqtl = nrow(gtp)))
}
else if (nrow(gtp) < 2) {
gtp <- NULL
tissue <- NULL
}
else {
return(data.table(gtp, TISSUE_ID = tissue, TISSUE_ABB = tissue_names), )
}
}
tissue_gtp <-  do.call(rbind, mapply(tissue_names, MoreArgs = names(tissue_names), function(x, y), count_sqtl(x, y, summarize = FALSE)))
tissue_gtp <-  do.call(rbind, mapply(tissue_names, MoreArgs = names(tissue_names), function(x, y) count_sqtl(x, y, summarize = FALSE)))
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ TISSUE_ID)
ggplot(data = tissue_gtp, aes(x = expectedP, y = logP, color = TISSUE_ID)) +
theme_bw() +
theme(panel.grid = element_blank(), legend.position = "none") +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
xlab(expression(Expected -log[10](italic("p")))) +
ylab(expression(Observed -log[10](italic("p")))) +
facet_wrap(~ names(TISSUE_ID))
