install.packages(c(
"shiny", "DT", "shinycssloaders", "shinyjs", "dplyr", "ggplot2", "leafcutter", "reshape2", "gridExtra", "intervals", "foreach", "grid", "gtable", "ggrepel", "ggbeeswarm", "stringr"
))
install.packages("leafcutter")
install.packages("grid")
install.packages("vcfR")
library(vcfR)
setwd("Documents/GitHub/neand_sQTL/scratch/")
vcf <- read.vcfR("GTExVCFSample.vcf.gz")
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
vcf <- read.vcfR("GTExVCFSample.vcf.gz")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
# enrichment funciton
# - We are finding random sets of non-NL introgressed SNPs that have a similar frequency to the NL-introgressed SNPs and
# determining how many of them are significant to build a null distribution. We then take the signficant NL-introgressed SNPs
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
vcf <- read.vcfR("GTExVCFSample.vcf.gz")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
vcf <- read.vcfR("GTExSample.vcf")
INFO2df(vcf, field="INFO")
INFO2df(vcf, field = "INFO")
INFO2df(vcf)
INFO2df(vcf)$AF
?vcfR
View(vcf)
GTEx <- read.vcfR("GTExSample.vcf")
GTEx
?vcfR2tidy
vcfR2tidy(GTEx)
vcfR2tidy(GTEx, info_fields = "AF")
vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx
View(GTEx)
GTEx[["fix"]]
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
# enrichment funciton
# - We are finding random sets of non-NL introgressed SNPs that have a similar frequency to the NL-introgressed SNPs and
# determining how many of them are significant to build a null distribution. We then take the signficant NL-introgressed SNPs
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
View(GTEx)
GTEx[["fix"]]
GTEx[["fix"]]$AF
data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$AF)
names(GTEx) <- c("Chrom", "Pos", "AF")
GTEx
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$AF)
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
# enrichment funciton
# - We are finding random sets of non-NL introgressed SNPs that have a similar frequency to the NL-introgressed SNPs and
# determining how many of them are significant to build a null distribution. We then take the signficant NL-introgressed SNPs
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$AF)
View(GTEx)
names(GTEx) <- c("Chrom", "Pos", "AF")
GTEx
View(nomQTL)
nomQTL
nomQTL <- c(nomQTL$var.chrom.id, nomQTL$var.start, nomQTL$var.end, nomQTL$`p-value`, nomQTL$top.var)
nomQTL
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$AF)
names(GTEx) <- c("Chrom", "Pos", "AF")
nomQTL <- c(nomQTL$var.chrom.id, nomQTL$var.start, nomQTL$var.end, nomQTL$`p-value`, nomQTL$top.var)
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
# enrichment funciton
# - We are finding random sets of non-NL introgressed SNPs that have a similar frequency to the NL-introgressed SNPs and
# determining how many of them are significant to build a null distribution. We then take the signficant NL-introgressed SNPs
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$AF)
names(GTEx) <- c("Chrom", "Pos", "AF")
nomQTL <- c(nomQTL$var.chrom.id, nomQTL$var.start, nomQTL$var.end, nomQTL$`p-value`, nomQTL$top.var)
nomQTL
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
# enrichment funciton
# - We are finding random sets of non-NL introgressed SNPs that have a similar frequency to the NL-introgressed SNPs and
# determining how many of them are significant to build a null distribution. We then take the signficant NL-introgressed SNPs
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p-value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$AF)
names(GTEx) <- c("Chrom", "Pos", "AF")
nomQTL
nomQTL$var.start
nomQTL[, var.id,phen.chrom.id]
nomQTL[, var.chrom.id, var.start, var.end, `p-value`, top.var]
nomQTL[, var.chrom.id, var.start, var.end, p-value, top.var]
subset(nomQTL)
?subset
subset(nomQTL, select = var.id)
subset(nomQTL, select = var.chrom.id:p-value)
subset(nomQTL, select = var.chrom.id:`p-value``)
subset(nomQTL, select = var.chrom.id:`p-value`)
nomQTL <- subset(nomQTL, select = var.chrom.id:`p-value`)
merge(GTEx, nomQTL)
nomQTL
GTEx
names(GTEx) <- c("var.chrom.id", "var.start", "AF")
merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
merge(nomQTL, GTEx[,"AF"], by = c("var.chrom.id", "var.start"))
GTEx
nomQTL
merge(nomQTL, GTEx[,"var.chrom.id", "var.start", "AF"], by = c("var.chrom.id", "var.start"))
merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
transform()
?transform()
transform(GTEx, var.chrom.id = as.integer(var.chrom.id))
GTEx <- transform(GTEx, var.chrom.id = as.integer(var.chrom.id))
transform(GTEx, var.chrom.id = as.integer(var.chrom.id))
merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
AllFreq <- merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
?permute
permPass <- fread("THYROID_permutations_chunk_1.txt")
permPass
?fread
names(permPass) <- perHead
permHead <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "deg.of.freedom.p.value", "dummy", "first.beta.dist", "second.beta.dist",
"nom.p.value", "reg.slope", "empirical.p.value", "adjusted.p.value")
names(permPass) <- permHead
View(permPass)
permPass <- fread("../analysis/PermPassResults/TopGenes_PermPass.txt")
View(permPass)
permPass <- fread("../analysis/PermPassResults/TopGenes_PermPass.txt")
View(permPass)
permPass
permPass[permPass$TISSUE_ID == 'THYROID',]
NROW(permPass[permPass$TISSUE_ID == 'THYROID',])
install.packages("Matching")
library(Matching)
?Matching
??Matching
Matching::Match()
?Matching::Match()
NROW(permPass[permPass$TISSUE_ID == 'THYROID',])
permPass[permPass$TISSUE_ID == 'THYROID',]
merge(permPass, GTEx, by = c("var.chrom.id", "var.start"))
GTEx
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p.value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
View(GTEx)
GTEx[["fix"]]$ID
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$ID, GTEx[["fix"]]$AF)
GTEx
names(GTEx) <- c("var.chrom.id", "var.start", "var.id", "AF")
GTEx
merge(permPass, GTEx, by = c("var.id"))
permPass
# permHead <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
#               "var.chrom.id", "var.start", "var.end", "deg.of.freedom.p.value", "dummy", "first.beta.dist", "second.beta.dist",
#               "nom.p.value", "reg.slope", "empirical.p.value", "adjusted.p.value")
permPass <- setNames(c("intron.cluster", "var.id", "tissue.id", "adj.p", "q.val", "gene.sym"))
?setNames
# permHead <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
#               "var.chrom.id", "var.start", "var.end", "deg.of.freedom.p.value", "dummy", "first.beta.dist", "second.beta.dist",
#               "nom.p.value", "reg.slope", "empirical.p.value", "adjusted.p.value")
setNames(permPass, c("intron.cluster", "var.id", "tissue.id", "adj.p", "q.val", "gene.sym"))
merge(permPass, GTEx, by = c("var.id"))
GTEx
merge(permPass, GTEx, by = c("var.id"))
merge(permPass, GTEx, by = "var.id")
GTEx$var.id
# permHead <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
#               "var.chrom.id", "var.start", "var.end", "deg.of.freedom.p.value", "dummy", "first.beta.dist", "second.beta.dist",
#               "nom.p.value", "reg.slope", "empirical.p.value", "adjusted.p.value")
setNames(permPass, c("intron.cluster", "var.id", "tissue.id", "adj.p", "q.val", "gene.sym"))
# permHead <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
#               "var.chrom.id", "var.start", "var.end", "deg.of.freedom.p.value", "dummy", "first.beta.dist", "second.beta.dist",
#               "nom.p.value", "reg.slope", "empirical.p.value", "adjusted.p.value")
permPass <- setNames(permPass, c("intron.cluster", "var.id", "tissue.id", "adj.p", "q.val", "gene.sym"))
merge(permPass, GTEx, by = "var.id")
permPass
GTEx
merge(permPass, GTEx[,"var.id", "AF"], by = "var.id")
merge(permPass, GTEx, by = "var.id")
permPass <- merge(permPass, GTEx, by = "var.id")
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
library(Matching)
# enrichment funciton
# - We are finding random sets of non-NL introgressed SNPs that have a similar frequency to the NL-introgressed SNPs and
# determining how many of them are significant to build a null distribution. We then take the signficant NL-introgressed SNPs
# and determine where they lie along the distribution. Permuations are the testing of the random set of SNPs.
#
# From nominal pass column, take `uniq` - that SNP will have an associated frequency
#
# From the VCF, grab all the SNPs that are in the nominal pass file so then you'll have frequency annotated with NL from SPrime
#
# do this for every permutation to find frequency matched SNPs
#
# Use `pymatch` or `Matching` for frequency matching
#
# Develop seed method for random permutation - set default seed
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p.value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$ID, GTEx[["fix"]]$AF)
names(GTEx) <- c("var.chrom.id", "var.start", "var.id", "AF")
nomQTL <- subset(nomQTL, select = var.chrom.id:`p-value`)
GTEx <- transform(GTEx, var.chrom.id = as.integer(var.chrom.id))
AllFreq <- merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
permPass <- fread("../analysis/PermPassResults/TopGenes_PermPass.txt")
# permHead <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
#               "var.chrom.id", "var.start", "var.end", "deg.of.freedom.p.value", "dummy", "first.beta.dist", "second.beta.dist",
#               "nom.p.value", "reg.slope", "empirical.p.value", "adjusted.p.value")
permPass <- setNames(permPass, c("intron.cluster", "var.id", "tissue.id", "adj.p", "q.val", "gene.sym"))
## enrichment test on QTLs
library(data.table)
library(R.utils)
library(vcfR)
library(Matching)
setwd("Documents/GitHub/neand_sQTL/scratch/")
GTEx <- read.vcfR("GTExSample.vcf")
nomQTL <- fread("THYROID_nominals_chunk_1_sample.txt")
QT_head <- c("phen.id", "phen.chrom.id", "phen.start", "phen.end", "strand.orient", "num.var.cis", "distance", "var.id",
"var.chrom.id", "var.start", "var.end", "p.value", "reg.slope", "top.var")
nomQTL <- setNames(nomQTL, QT_head)
GTEx <- vcfR2tidy(GTEx, info_fields = "AF", info_types = c(AF = "n"))
GTEx <- data.table(GTEx[["fix"]]$CHROM, GTEx[["fix"]]$POS, GTEx[["fix"]]$ID, GTEx[["fix"]]$AF)
names(GTEx) <- c("var.chrom.id", "var.start", "var.id", "AF")
nomQTL <- subset(nomQTL, select = var.chrom.id:`p-value`)
GTEx <- transform(GTEx, var.chrom.id = as.integer(var.chrom.id))
nomQTL
GTEx
AllFreq <- merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
nomQTL
AllFreq
AllNomFreq <- merge(nomQTL, GTEx, by = c("var.chrom.id", "var.start"))
