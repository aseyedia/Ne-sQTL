NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'ID')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
#!/usr/bin/env Rscript
require("data.table")
# arg 1 is leafcutter PCs, arg 2 is GTEx covariate file for tissue
args = commandArgs(trailingOnly=TRUE)
library("data.table")
#leafcut <- fread(args[1])
leafcut <- fread("testNE_sQTL_perind.counts.gz.PCs")
#gtexPC <- fread(args[2])
gtexPC <- fread("GTEx_Analysis_v7_eQTL_covariates/Whole_Blood.v7.covariates.txt")
# make the use of "id" header standard
setnames(gtexPC, "ID", "id")
#!/usr/bin/env Rscript
require("data.table")
# arg 1 is leafcutter PCs, arg 2 is GTEx covariate file for tissue
args = commandArgs(trailingOnly=TRUE)
library("data.table")
#leafcut <- fread(args[1])
leafcut <- fread("NE_sQTL_perind.counts.gz.PCs")
#leafcut <- fread(args[1])
leafcut <- fread("Ne-sQTL_perind.counts.gz.PCs")
#gtexPC <- fread(args[2])
gtexPC <- fread("GTEx_Analysis_v7_eQTL_covariates/Whole_Blood.v7.covariates.txt")
# make the use of "id" header standard
setnames(gtexPC, "ID", "id")
ind <- match(names(gtexPC), leafcut)
lookup <- fread("tissue_table.txt")
ind <- match(names(leafcut), lookup$Run)
names(leafcut) <- lookup$submitted_subject_id[ind]
#!/usr/bin/env Rscript
require("data.table")
# arg 1 is leafcutter PCs, arg 2 is GTEx covariate file for tissue
args = commandArgs(trailingOnly=TRUE)
library("data.table")
#leafcut <- fread(args[1])
leafcut <- fread("Ne-sQTL_perind.counts.gz.PCs")
#gtexPC <- fread(args[2])
gtexPC <- fread("GTEx_Analysis_v7_eQTL_covariates/Whole_Blood.v7.covariates.txt")
lookup <- fread("tissue_table.txt")
# make the use of "id" header standard
setnames(gtexPC, "ID", "id")
ind <- match(names(leafcut), lookup$Run)
names(leafcut) <- lookup$submitted_subject_id[ind]
View(lookup)
View(leafcut)
# making sure our leafcutter friends have the right header names
ind <- match(names(leafcut), lookup$Run)
names(leafcut) <- lookup$submitted_subject_id[ind]
# concatenate; fill missing values with na, but then remove
out = rbind(leafcut,gtexPC, use.names=T, fill=T)
# omit NA's with a function that only works on rows
out <- t(na.omit(t(out)))
tissue = tools::file_path_sans_ext(basename(args[2]))
outfile <- gsub(" ", "", paste(tissue, "_output.txt"), fixed = TRUE)
View(out)
?basename
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
View(NE)
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
getwd()
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
View(tistab)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
View(sites)
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
View(tissues)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
View(sites)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
View(NE)
View(tistab)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
View(sites)
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
View(tissues)
View(sites)
View(tissues)
View(tissues)
View(tistab)
View(tissues)
View(sites)
View(NE)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- read("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- read("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
View(tissues)
View(sites)
View(tissues)
tissues[["ARTAORT"]]
tissues[["BRNCHB"]]
tissues[["BRNCHA"]]
View(tissues)
names(tissues)
names(tissues[[BRNCHA]])
names(tissues[["BRNCHA"]])
names(tissues[["WHLBLD"]])
length(names(tissues[["WHLBLD"]]))
lapply(tissues, function(x) length(names(tissues[[x]])) > 6)
lapply(tissues, function(x) length(names(tissues[["x"]])) > 6)
lapply(tissues, function(x) length(names(tissues[["x"]])) > 6)
tissues
lapply(tissues, function(x) length(names(tissues[["x"]])) > 6)
length(names(tissues[["TESTIS"]])))
length(names(tissues[["TESTIS"]])
;
length(names(tissues[["TESTIS"]]))
length(names(tissues[["TESTIS"]]) > 6)
length(names(tissues[["TESTIS"]])) > 6
lapply(tissues, function(x) length(names(tissues[["s"]])) > 6)
lapply(tissues, function(x) length(names(tissues[["x"]])) > 6)
length(names(tissues[["TESTIS"]])) > 6
sapply(tissues, function(x) length(names(tissues[["x"]])) > 6)
lapply(tissues, function(x) length(names(tissues[["x"]])) > 6)
lapply(tissues, function(x) length(names(tissues[[$"x"]])) > 6)
lapply(tissues, function(x) length(names(tissues[["$x"]])) > 6)
lapply(tissues, function(x) length(names(tissues[["x"]])) > int(6)
)
lapply(tissues, function(x) length(names(tissues[["x"]])) > as.integer(6))
lapply(tissues, function(x) as.integer(length(names(tissues[["x"]]))) > as.integer(6))
length(names(tissues[["TESTIS"]])) > 6
lapply(tissues, function(x) as.integer(length(names(tissues[["x"]]))) > as.integer(6))
lapply(tissues, function(x) length(names(tissues[[x]])) > 6)
lapply(tissues, function(x) length(names(tissues[[eval(x)]])) > 6)
lapply(tissues, function(x) length(names(tissues[[deparse(eval(x))]])) > 6)
lapply(tissues, function(quote(x)) length(names(tissues[[eval(x)]])) > 6)
lapply(tissues, function(x) length(names(tissues[[eval(x)]])) > 6)
lapply(tissues, function(x) length(names(tissues[[eval(quote(x))]])) > 6)
lapply(tissues, function(x) length(names(tissues[[get(x)]])) > 6)
length(names(tissues[["TESTIS"]])) > 6
tissues
lapply(tissues, function(x) {y = quote(x); length(names(tissues[[eval(y)]])) > 6})
lapply(tissues, function(x) print(x))
lapply(tissues, function(x) print(eval(x)))
lapply(tissues, function(x) {y <- quote(x); print(eval(y))})
?quote()
eval()?
;
?eval
lapply(tissues, function(x) length(names(tissues[[eval(quote(x))]])) > 6)
lapply(tissues, function(x) length(names(tissues[[eval(quote("x"))]])) > 6)
lapply(tissues, function(x) length(names(tissues[[eval(quote(x))]])) > 6)
names(tissues)
lapply(names(tissues), function(x) length(names(tissues[[eval(quote(x))]])) > 6)
lapply(names(tissues), function(x) ncols((tissues[[eval(quote(x))]])) > 6)
lapply(names(tissues), function(x) ncol((tissues[[eval(quote(x))]])) > 6)
lapply(names(tissues), function(x) ncol((tissues[[x]])) > 6)
unlist(lapply(names(tissues), function(x) ncol(tissues[[eval(quote(x))]]) > 6))
keep_index <- unlist(lapply(names(tissues), function(x) ncol(tissues[[eval(quote(x))]]) > 6))
tissues_kept <- tissues[keep_index]
View(tissues_kept)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
#args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
keep_index <- unlist(lapply(names(tissues), function(x) ncol(tissues[[eval(quote(x))]]) > 6))
tissues_kept <- tissues[keep_index]
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
names(tissues_kept)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
#args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
keep_index <- unlist(lapply(names(tissues), function(x) ncol(tissues[[eval(quote(x))]]) > 6))
tissues_kept <- tissues[keep_index]
names(tissues_kept)
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
#args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
keep_index <- unlist(lapply(names(tissues), function(x) ncol(tissues[[eval(quote(x))]]) > 6))
tissues_kept <- tissues[keep_index]
names(tissues_kept)
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
sapply(names(tissues), function (x) write.table(tissues_kept[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
sapply(names(tissues_kept), function (x) write.table(tissues_kept[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
sapply(names(tissues_kept), function (x) write.table(tissues_kept[[x]], file=paste0(paste0(tissues_kept[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
names(tissues_kept[[1]])
names(tissues_kept[[]])
length(tissues_kept)
for (i in length(tissues_kept)){
ind <- match(names(tissues_kept[[i]]), tistab$Sample_Name)
names(tissues_kept[[i]]) <- tistab$submitted_subject_id[ind]
}
View(tissues_kept)
for (i in length(tissues_kept)){
ind <- match(names(tissues_kept[[i]]), tistab$Sample_Name)
names(tissues_kept[[i]]) <- tistab$submitted_subject_id[ind]
}
ind <- match(names(tissues_kept[[i]]), tistab$Sample_Name)
for (i in 1:length(tissues_kept)){
ind <- match(names(tissues_kept[[i]]), tistab$Sample_Name)
names(tissues_kept[[i]]) <- tistab$submitted_subject_id[ind]
}
View(tissues_kept)
names(tissues_kept[[1]])
names(tissues_kept[[2]])
tissues_kept
View(tissues_kept)
View(tissues_kept)
require("data.table")
require("R.utils")
#args = commandArgs(trailingOnly=TRUE)
#args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
setnames(NE, c('ID', '.', '+'), c('PID', 'GID', 'Strand'))
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$Sample_Name[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(Sample_Name, body_site))
keep <- c('#Chr', 'start', 'end', 'PID', 'GID', 'Strand')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
keep_index <- unlist(lapply(names(tissues), function(x) ncol(tissues[[eval(quote(x))]]) > 6))
tissues_kept <- tissues[keep_index]
for (i in 1:length(tissues_kept)){
ind <- match(names(tissues_kept[[i]]), tistab$Sample_Name)
names(tissues_kept[[i]]) <- tistab$submitted_subject_id[ind]
}
sapply(names(tissues_kept), function (x) write.table(tissues_kept[[x]], file=paste0(paste0(tissues_kept[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
