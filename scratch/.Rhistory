libPaths()
libpaths
library(package)
libPath
libPaths
libPath()
libPaths()
.libPaths
.Library
.Lib
Library
.Library.site
.libPaths()
importIntoEnv()
exit
exit()
q()
.libPaths()
install.packages("swirl")
installed.packages("devtools")
if (!require("devtools")) install.packages("devtools", repos='http://cran.us.r-project.org')
devtools::install_github("davidaknowles/leafcutter/leafcutter")
if (!require("devtools")) install.packages("devtools", repos='http://cran.us.r-project.org')
devtools::install_github("davidaknowles/leafcutter/leafcutter")
install.packages("rstan")
install.packages("rstan")
install.packages("Eigen")
install.packages("Dense")
install.packages("Eigen/Dense")
install.packages("rstan")
clear
l
if (!require("devtools")) install.packages("devtools", repos='http://cran.us.r-project.org')
devtools::install_github("davidaknowles/leafcutter/leafcutter", dependencies = TRUE)
install.packages("swirl")
getwd()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rep
require("data.table")
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'ID')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
setwd("Documents/GitHub/Ne-sQTL/scratch/")
require("data.table")
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'ID')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
library("data.table")
args = commandArgs(trailingOnly=TRUE)
# SraRunTable.txt is args[1]
#sratabl <- fread(args[1])
sratabl <- fread("SraRunTable.txt")
tiskey <- fread("GTExTissueKey.csv")
#tiskey <- fread(args[2])
sratabl$tmp <- tiskey$Key[ match(sratabl$body_site, tiskey$Tissue) ]
sratabl$tmp <- ifelse(is.na(sratabl$tmp), sratabl$body_site, sratabl$tmp)
sratabl$body_site <- sratabl$tmp
sratabl$tmp <- NULL
# current directory is args [2]
#new <- sratabl  # create a copy of df
# using lapply, loop over columns and match values to the look up table. store in "new".
#new[] <- lapply(sratabl, function(x) tiskey$Key[match(x, tiskey$Tissue)])
#new <- sratabl
#new[] <- tiskey$Key[match(unlist(sratabl), tiskey$Tissue)]
tissuesite <- subset(sratabl, select=c("Run", "Sample_Name", "body_site", "submitted_subject_id"))
write.table(tissuesite, file=gsub(" ", "", paste("tissue_table.txt")), quote = F, sep= "\t", eol = "\r\n", row.names = F)
library("data.table")
args = commandArgs(trailingOnly=TRUE)
# SraRunTable.txt is args[1]
#sratabl <- fread(args[1])
sratabl <- fread("SraRunTable.txt")
tiskey <- fread("GTExTissueKey.csv")
#tiskey <- fread(args[2])
sratabl$tmp <- tiskey$Key[ match(sratabl$body_site, tiskey$Tissue) ]
sratabl$tmp <- ifelse(is.na(sratabl$tmp), sratabl$body_site, sratabl$tmp)
sratabl$body_site <- sratabl$tmp
sratabl$tmp <- NULL
# current directory is args [2]
#new <- sratabl  # create a copy of df
# using lapply, loop over columns and match values to the look up table. store in "new".
#new[] <- lapply(sratabl, function(x) tiskey$Key[match(x, tiskey$Tissue)])
#new <- sratabl
#new[] <- tiskey$Key[match(unlist(sratabl), tiskey$Tissue)]
tissuesite <- subset(sratabl, select=c("Run", "Sample_Name", "body_site", "submitted_subject_id"))
write.table(tissuesite, file=gsub(" ", "", paste("tissue_table.txt")), quote = F, sep= "\t", eol = "\r\n", row.names = F)
require("data.table")
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
# I guess now what I want to do is find the tissue that corresponds to each sample, and write
# to file the phenotypes or whatever
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'ID')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
require("R.utils")
args = commandArgs(trailingOnly=TRUE)
# args[1] is the leafcutter-generated phenotypes, args[2] is the tissue table
#NE <- fread(paste0("zcat ", args[1]))
NE <- fread("zcat Ne-sQTL_perind.counts.gz.qqnorm_chr16.gz.qtltools")
#tistab <- fread(args[2])
tistab <- fread("tissue_table.txt")
# below takes the SRR IDs found in NE column headers, matches them to those found in the
# tissue table, and then changes them the GTEX sample ID
ind <- match(names(NE), tistab$Run)
names(NE) <- tistab$submitted_subject_id[ind]
## From GitHub
# If you split Sample_Name by body_site, you get a vector of Sample_Names corresponding to
# each body_site. Then you just need to intersect this with the names of NE for each body_site,
# and select the columns resulting from that intersection. The result is a named list of
# data tables. The names are the body_site values.
sites <- with(tistab, split(submitted_subject_id, body_site))
keep <- c('#Chr', 'start', 'end', 'ID')
tissues <- lapply(sites, function(x)
NE[, .SD, .SDcols = c(keep, intersect(names(NE), x))])
sapply(names(tissues), function (x) write.table(tissues[[x]], file=paste0(paste0(tissues[[x]]$`#Chr`[1], "_"), x,".", "txt"), row.names=F, quote=FALSE, sep="\t"))
#!/usr/bin/env Rscript
require("data.table")
# arg 1 is leafcutter PCs, arg 2 is GTEx covariate file for tissue
args = commandArgs(trailingOnly=TRUE)
library("data.table")
#leafcut <- fread(args[1])
leafcut <- fread("testNE_sQTL_perind.counts.gz.PCs")
#gtexPC <- fread(args[2])
gtexPC <- fread("GTEx_Analysis_v7_eQTL_covariates/Whole_Blood.v7.covariates.txt")
# make the use of "id" header standard
setnames(gtexPC, "ID", "id")
#!/usr/bin/env Rscript
require("data.table")
# arg 1 is leafcutter PCs, arg 2 is GTEx covariate file for tissue
args = commandArgs(trailingOnly=TRUE)
library("data.table")
#leafcut <- fread(args[1])
leafcut <- fread("NE_sQTL_perind.counts.gz.PCs")
#leafcut <- fread(args[1])
leafcut <- fread("Ne-sQTL_perind.counts.gz.PCs")
#gtexPC <- fread(args[2])
gtexPC <- fread("GTEx_Analysis_v7_eQTL_covariates/Whole_Blood.v7.covariates.txt")
# make the use of "id" header standard
setnames(gtexPC, "ID", "id")
ind <- match(names(gtexPC), leafcut)
lookup <- fread("tissue_table.txt")
ind <- match(names(leafcut), lookup$Run)
names(leafcut) <- lookup$submitted_subject_id[ind]
#!/usr/bin/env Rscript
require("data.table")
# arg 1 is leafcutter PCs, arg 2 is GTEx covariate file for tissue
args = commandArgs(trailingOnly=TRUE)
library("data.table")
#leafcut <- fread(args[1])
leafcut <- fread("Ne-sQTL_perind.counts.gz.PCs")
#gtexPC <- fread(args[2])
gtexPC <- fread("GTEx_Analysis_v7_eQTL_covariates/Whole_Blood.v7.covariates.txt")
lookup <- fread("tissue_table.txt")
# make the use of "id" header standard
setnames(gtexPC, "ID", "id")
ind <- match(names(leafcut), lookup$Run)
names(leafcut) <- lookup$submitted_subject_id[ind]
View(lookup)
View(leafcut)
# making sure our leafcutter friends have the right header names
ind <- match(names(leafcut), lookup$Run)
names(leafcut) <- lookup$submitted_subject_id[ind]
# concatenate; fill missing values with na, but then remove
out = rbind(leafcut,gtexPC, use.names=T, fill=T)
# omit NA's with a function that only works on rows
out <- t(na.omit(t(out)))
tissue = tools::file_path_sans_ext(basename(args[2]))
outfile <- gsub(" ", "", paste(tissue, "_output.txt"), fixed = TRUE)
View(out)
?basename
