demo[,DECLINED == 0 | DECLINED == NA]
is.na(demo)
demo[,DECLINED == 0 | DECLINED == NA]
demo[,DECLINED == 0]
demo
is.na(demo) <- 0
demo[is.na(demo)] <- 0
demo
?subset
library(data.table)
library(tidyverse)
base_url <- "http://data.blackfynn.io/curator_data_challenge/"
# Section 1:
##################################################################
gds_score <- function(gds_form) {
return(rowSums(subset(gds_form, select = 4:18)))
}
gds_solution <- function(gds_form){
return(gds_score(gds_form))
}
gds <- fread(paste0(base_url, "data/Geriatric_Depression_Scale__Short_.csv"))
# each column is a question in the gds-short, each row is a pt. 0 and 1 represent their yes/no answers, 0 indicating
# healthy, 1 indicating depression
# codelist did not contain any relevant information as far as I can tell
gds$gds_score <- gds_solution(gds_form = gds)
# Section 2
##################################################################
code_book <- fread(paste0(base_url, "decoding/Code_List.csv"))
data_dict <- fread(paste0(base_url,"decoding/Data_Dictionary.csv"))
# load demographics and primary diagnosis tables
demo <- fread(paste0(base_url,"data/Screening___Demographics.csv"))
diag <- fread(paste0(base_url, "data/Primary_Diagnosis.csv"))
# PRIMDIAG in diag and APPRDX in demo
# translate APPRDX - 1 = PD and 2 = H (healthy)
# PRIMDIAG - 1 = PD and 17 = H (healthy)
# find where there is a mismatch
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG == "1" | APPRDX == "1" & PRIMDIAG == "17"|
APPRDX == "2" & PRIMDIAG != "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
# PAG_NAME COL_NAME CODE                        DECODE
# 1:   SCREEN   APPRDX    1           Parkinson's disease
# 2:   SCREEN   APPRDX    2               Healthy Control
# 3:   SCREEN   APPRDX    3                         SWEDD (Scans Without Evidence of Dopaminergic Degeneration)
# 4:   SCREEN   APPRDX    4                     Prodromal
# 5:   SCREEN   APPRDX    5           Genetic Cohort - PD
# 6:   SCREEN   APPRDX    6   Genetic Cohort - Unaffected
# 7:   SCREEN   APPRDX    7         Genetic Registry - PD
# 8:   SCREEN   APPRDX    8 Genetic Registry - Unaffected
# 9:   SCREEN   APPRDX    9                         AV133 (PET tracer for Parkinson's, binds to VMAT2 and visualizes intact DA neurons - signal declines with PD)
# (Am guessing it means they have PD based on VMAT2-PET binding)
# PRIMDIAG - 1 = PD, 17 = Healthy
gds <- gds %>% mutate_at(c(4:18), as.logical)
demo[is.na(demo[, REFERRAL:RSNEXC])] <- 0
demo
demo[is.na(demo[, c(REFERRAL:RSNEXC)])] <- 0
demo[is.na(demo[, "REFERRAL":"RSNEXC"])] <- 0
demo
demo[is.na(demo[, -4:-1])] <- 0
demo[is.na(demo[, 14:17])] <- 0
demo[is.na(demo[14:17])] <- 0
demo[is.na(demo)] <- 0
demo
subset(demo, DECLINED == 0)
subset(demo, DECLINED == 0 & EXCLUDED == 0)
# Drop all rows where PT either declined inclusion or was excluded for any reason
demo <- subset(demo, DECLINED == 0 & EXCLUDED == 0) %>%
subset(., !PATNO == sec2$PATNO )
demo
sec2
gds <- fread(paste0(base_url, "data/Geriatric_Depression_Scale__Short_.csv"))
gds
gds[, c(1, 5, 7, 11, 13)]
gds[c(1, 5, 7, 11, 13)]
gds[c(5, 9, 11, 15, 17)]
gds[c(5, 9, 11, 15, 17)]
subset(gds, select = c(5, 9, 11, 15, 17))
subset(gds, select = c(4, 8, 10, 14, 16, 18))
subset(gds, select = c(4, 8, 10, 14, 16))
subset(gds, select = c(4, 8, 10, 14, 16))
gds[, c(4, 8)]
gds[, c(4, 8, 10, 14, 16)]
gds[, c(4, 8, 10, 14, 16) == 1]
gds[, c(4, 8, 10, 14, 16)] ==1
gds[, c(4, 8, 10, 14, 16)]
invert?
?invert
gds[, c(4, 8, 10, 14, 16)]
gds[, c(4, 8, 10, 14, 16)]
View(code_book)
gds[, !c(4, 8, 10, 14, 16)]
!gds[, c(4, 8, 10, 14, 16)]
as.numeric(!gds[, c(4, 8, 10, 14, 16)])
gds[, c(4, 8, 10, 14, 16)] <- as.numeric(!gds[, c(4, 8, 10, 14, 16)])
gds
gds[, c(4, 8, 10, 14, 16)] <- as.numeric(!gds[, c(4, 8, 10, 14, 16)])
1 - gds[, c(4, 8, 10, 14, 16)]
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
gds[, c(4, 8, 10, 14, 16)]
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
gds[, c(4, 8, 10, 14, 16)]
View(demo)
View(demo)
code_book[APPRDX == 9]
code_book[COL_NAME == "APPRDX"]
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG == "1" | APPRDX == "1" & PRIMDIAG == "17"|
APPRDX == "2" & PRIMDIAG != "17" | APPRDX == "9" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
library(data.table)
library(tidyverse)
# "0" answers are a point towards depression for columns 4, 8, 10, 14, 16
gds_score <- function(gds_form) {
return(rowSums(subset(gds_form, select = 4:18)))
}
gds_solution <- function(gds_form){
return(gds_score(gds_form))
}
# each column is a question in the gds-short, each row is a pt. 0 and 1 represent their yes/no answers
gds <- fread(paste0(base_url, "data/Geriatric_Depression_Scale__Short_.csv"))
# the questions represented by the above columns have inverted values, i.e a "no" answer counts as a point towards depression whereas a "yes" does not
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
# codelist did not contain any relevant information as far as I can tell
gds$gds_score <- gds_solution(gds_form = gds)
# reverting the values of the above columns to what they were originally
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
gds
code_book <- fread(paste0(base_url, "decoding/Code_List.csv"))
data_dict <- fread(paste0(base_url,"decoding/Data_Dictionary.csv"))
# load demographics and primary diagnosis tables
demo <- fread(paste0(base_url,"data/Screening___Demographics.csv"))
diag <- fread(paste0(base_url, "data/Primary_Diagnosis.csv"))
# PRIMDIAG in diag and APPRDX in demo
# translate APPRDX - 1 = PD and 2 = H (healthy)
# PRIMDIAG - 1 = PD and 17 = H (healthy)
# find where there is a mismatch
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG == "1" | APPRDX == "1" & PRIMDIAG == "17"|
APPRDX == "2" & PRIMDIAG != "17" | APPRDX == "9" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
View(demo)
View(demo)
View(code_book)
code_book[COL_NAME == "APPRDX"]
code_book[COL_NAME == "PRIMDIAG"]
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX != "1" & PRIMDIAG == "1" | APPRDX == "1" & PRIMDIAG != "1"|
APPRDX == "2" & PRIMDIAG != "17" | APPRDX != "2" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG != "17" | APPRDX != "2" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- dis
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG != "17" | APPRDX != "2" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
library(data.table)
library(tidyverse)
# "0" answers are a point towards depression for columns 4, 8, 10, 14, 16
gds_score <- function(gds_form) {
return(rowSums(subset(gds_form, select = 4:18)))
}
gds_solution <- function(gds_form){
return(gds_score(gds_form))
}
# each column is a question in the gds-short, each row is a pt. 0 and 1 represent their yes/no answers
gds <- fread(paste0(base_url, "data/Geriatric_Depression_Scale__Short_.csv"))
# the questions represented by the above columns have inverted values, i.e a "no" answer counts as a point towards depression whereas a "yes" does not
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
# codelist did not contain any relevant information as far as I can tell
gds$gds_score <- gds_solution(gds_form = gds)
# reverting the values of the above columns to what they were originally
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
gds
code_book <- fread(paste0(base_url, "decoding/Code_List.csv"))
data_dict <- fread(paste0(base_url,"decoding/Data_Dictionary.csv"))
# load demographics and primary diagnosis tables
demo <- fread(paste0(base_url,"data/Screening___Demographics.csv"))
diag <- fread(paste0(base_url, "data/Primary_Diagnosis.csv"))
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG != "17" | APPRDX != "2" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
# Combine all three tables (GDS, Demographics, and Diagnosis information) into a single table.
combined_solution <- function(gds, demo, diag, sec2) {
# Turn all scores to booleans
gds <- gds %>% mutate_at(c(4:18), as.logical)
# Replace NAs with 0s
demo[is.na(demo)] <- 0
# Drop all rows where PT either declined inclusion or was excluded for any reason
# Also drop any rows with discrepency found in section 2
demo <- subset(demo, DECLINED == 0 & EXCLUDED == 0) %>%
subset(.,!PATNO == sec2$PATNO)
# Join the three tables
return(full_join(full_join(gds, demo, by = "PATNO"), diag, by = "PATNO"))
}
combined_solution(gds, demo, diag, sec2)
library(data.table)
library(tidyverse)
base_url <- "http://data.blackfynn.io/curator_data_challenge/"
# "0" answers are a point towards depression for columns 4, 8, 10, 14, 16
gds_score <- function(gds_form) {
return(rowSums(subset(gds_form, select = 4:18)))
}
gds_solution <- function(gds_form){
return(gds_score(gds_form))
}
# each column is a question in the gds-short, each row is a pt. 0 and 1 represent their yes/no answers
gds <- fread(paste0(base_url, "data/Geriatric_Depression_Scale__Short_.csv"))
# the questions represented by the above columns have inverted values, i.e a "no" answer counts as a point towards depression whereas a "yes" does not
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
# codelist did not contain any relevant information as far as I can tell
gds$gds_score <- gds_solution(gds_form = gds)
# reverting the values of the above columns to what they were originally
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
gds
code_book <- fread(paste0(base_url, "decoding/Code_List.csv"))
data_dict <- fread(paste0(base_url,"decoding/Data_Dictionary.csv"))
# load demographics and primary diagnosis tables
demo <- fread(paste0(base_url,"data/Screening___Demographics.csv"))
diag <- fread(paste0(base_url, "data/Primary_Diagnosis.csv"))
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG != "17" | APPRDX != "2" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
# Combine all three tables (GDS, Demographics, and Diagnosis information) into a single table.
combined_solution <- function(gds, demo, diag, sec2) {
# Turn all scores to booleans
gds <- gds %>% mutate_at(c(4:18), as.logical)
# Replace NAs with 0s
demo[is.na(demo)] <- 0
# Drop all rows where PT either declined inclusion or was excluded for any reason
# Also drop any rows with discrepency found in section 2
demo <- subset(demo, DECLINED == 0 & EXCLUDED == 0) %>%
subset(.,!PATNO == sec2$PATNO)
# Join the three tables
return(full_join(full_join(gds, demo, by = "PATNO"), diag, by = "PATNO"))
}
combined_solution(gds, demo, diag, sec2)
library(data.table)
library(tidyverse)
base_url <- "http://data.blackfynn.io/curator_data_challenge/"
# Section 1: Calculate a new variable
##################################################################
# "0" answers are a point towards depression for columns 4, 8, 10, 14, 16
gds_score <- function(gds_form) {
return(rowSums(subset(gds_form, select = 4:18)))
}
gds_solution <- function(gds_form){
return(gds_score(gds_form))
}
gds <- fread(paste0(base_url, "data/Geriatric_Depression_Scale__Short_.csv"))
# each column is a question in the gds-short, each row is a pt. 0 and 1 represent their yes/no answers
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
# the questions represented by the above columns have inverted values, i.e a "no" answer counts as a point towards depression, and vice versa
# codelist did not contain any relevant information as far as I can tell
gds$gds_score <- gds_solution(gds_form = gds)
gds[, c(4, 8, 10, 14, 16)] <- 1 - gds[, c(4, 8, 10, 14, 16)]
# reverting the values of the above columns to what they were originally
gds
# Section 2: Identify a discrepancy between two tables
##################################################################
code_book <- fread(paste0(base_url, "decoding/Code_List.csv"))
data_dict <- fread(paste0(base_url,"decoding/Data_Dictionary.csv"))
# load demographics and primary diagnosis tables
demo <- fread(paste0(base_url,"data/Screening___Demographics.csv"))
diag <- fread(paste0(base_url, "data/Primary_Diagnosis.csv"))
# PRIMDIAG in diag and APPRDX in demo
# translate APPRDX - 1 = PD and 2 = H (healthy)
# PRIMDIAG - 1 = PD and 17 = H (healthy)
# find where there is a mismatch
discrepency_solution <- function(demo, diag){
demo <- subset(demo, select = c(PATNO, APPRDX))
diag <- subset(diag, select = c(PATNO, PRIMDIAG))
joint <- as.data.table(na.omit(full_join(demo, diag, by = 'PATNO', keep = T)))
mismatch <- joint[APPRDX == "2" & PRIMDIAG != "17" | APPRDX != "2" & PRIMDIAG == "17"]
# Consider expanding this to make it more generalizable - look more carefully at the
# study document and figure out which APPRDX corresponds to which PRIMDIAG, and what
# that means re: inclusion/exclusion criteria - Everything non-PD is just neuro disorder
return(mismatch)
}
sec2 <- discrepency_solution(demo, diag)
sec2
# Section 3: Prepare an "analysis-ready" dataset
##################################################################
# Combine all three tables (GDS, Demographics, and Diagnosis information) into a single table.
combined_solution <- function(gds, demo, diag, sec2) {
# Turn all scores to booleans
gds <- gds %>% mutate_at(c(4:18), as.logical)
# Replace NAs with 0s
demo[is.na(demo)] <- 0
# Drop all rows where PT either declined inclusion or was excluded for any reason
# Also drop any rows with discrepency found in section 2
demo <- subset(demo, DECLINED == 0 & EXCLUDED == 0) %>%
subset(.,!PATNO == sec2$PATNO)
# Join the three tables
return(full_join(full_join(gds, demo, by = "PATNO"), diag, by = "PATNO"))
}
combined_solution(gds, demo, diag, sec2)
library(data.table)
library(GenomicRanges)
library(stringr)
dt <- fread("loosenedRestrictions.txt", header = T)
coords <- as.data.table(str_split_fixed(dt$transcript_id, "_", 3))
names(coords) <- c("chr", "start", "stop")
dt <- fread("loosenedRestrictions.txt", header = T)
coords <- as.data.table(str_split_fixed(dt$transcript_id, "_", 3))
getwd()
getwd("results/loosenedRestrictions.txt")
dt <- fread("results/loosenedRestrictions.txt", header = T)
coords <- as.data.table(str_split_fixed(dt$transcript_id, "_", 3))
names(coords) <- c("chr", "start", "stop")
coords
library(biomaRt)
install.packages("biomaRt")
library(annotate)
library(rtracklayer)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("annotate")
gene_list <- rtracklayer::import("C:/Users/artas/Downloads/gencode.v26.GRCh38.genes.gtf") %>%
makeGRangesFromDataFrame(., keep.extra.columns = T) %>%
as.data.table()
gene_list <- rtracklayer::import("C:/Users/artas/Downloads/gencode.v26.GRCh38.genes.gtf") %>%
makeGRangesFromDataFrame(., keep.extra.columns = T) %>%
as.data.table()
gene_list <- gene_list[type == "gene" & gene_type == "protein_coding"]
gene_list[, subjectHits := .I]
gene_list
dt <- fread("results/loosenedRestrictions.txt", header = T)
coords <- as.data.table(str_split_fixed(dt$transcript_id, "_", 3))
names(coords) <- c("chr", "start", "stop")
gene_list
names(coords) <- c("seqnames", "start", "stop")
coords
?do.call
coords_gr <- makeGRangesFromDataFrame(coords, keep.extra.columns = F)
gene_list_gr <- makeGRangesFromDataFrame(gene_list, keep.extra.columns = T)
View(coords)
View(coords_gr)
coords_gr
gene_list_gr
olaps <- findOverlaps(coords_gr, gene_list_gr) %>%
as.data.table()
ol
olaps
dt[, queryHits := .I]
dt
gene_list
dt <- dt[olaps, on = "queryHits", nomatch = 0]
dt
dt <- dt[gene_list, on = "subjectHits", nomatch = 0]
dt
file_list <- list.files(pattern = "C:/Users/artas/Desktop/countCounts/*.txt")
#read them all to file
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- fread(file, header=TRUE, sep="\t")
dataset$tissue <- gsub("^([^_]*_[^_]*)_.*$", "\\1", file)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-fread(file, header=TRUE, sep="\t")
temp_dataset$tissue <- gsub("^([^_]*_[^_]*)_.*$", "\\1", file)
# browser()
if(nrow(temp_dataset) == 0 ){
next();
}
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
dataset[is.na(dataset)] <- 0
# transcripts where the number of individuals with the HH not expressing the transcript is greater than zero and the
# number of individuals expressing the transcript with the same genotype is less than 10
loosened <- dataset[HH0 > 0 & `HH>0`< 10][, .(n=.N), by=.(transcript_id)][order(n),]
# countCounts
file_list <- list.files(pattern = "C:/Users/artas/Desktop/countCounts/*.txt")
# countCounts
file_list <- list.files(pattern = "C:/Users/artas/Desktop/countCounts/*.txt")
setwd("C:/Users/artas/Desktop/countCounts/")
# countCounts
file_list <- list.files(pattern = "*.txt")
#read them all to file
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- fread(file, header=TRUE, sep="\t")
dataset$tissue <- gsub("^([^_]*_[^_]*)_.*$", "\\1", file)
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-fread(file, header=TRUE, sep="\t")
temp_dataset$tissue <- gsub("^([^_]*_[^_]*)_.*$", "\\1", file)
# browser()
if(nrow(temp_dataset) == 0 ){
next();
}
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
dataset[is.na(dataset)] <- 0
# transcripts where the number of individuals with the HH not expressing the transcript is greater than zero and the
# number of individuals expressing the transcript with the same genotype is less than 10
loosened <- dataset[HH0 > 0 & `HH>0`< 10][, .(n=.N), by=.(transcript_id)][order(n),]
loosened
dt
dt2 <- dt[, c(transcript_id, seqnames, start, end, gene_name, n)]
dt2
dt2 <- subset(dt, c(transcript_id, seqnames, start, end, gene_name, n))
?subset
subset
?subset
dt2 <- subset(dt, subset = c(transcript_id, seqnames, start, end, gene_name, n))
DT <- data.table(a=sample(c('a', 'b', 'c'), 20, replace=TRUE),
b=sample(c('a', 'b', 'c'), 20, replace=TRUE),
c=sample(20), key=c('a', 'b'))
sub <- subset(DT, a == 'a')
View(sub)
View(DT)
View(sub)
?select.list
library(dplyr)
library(dplyr)
select(dt, c(transcript_id, seqnames, start, end, gene_name, n))
dt <- select(dt, c(transcript_id, seqnames, start, end, gene_name, n))
dt
write.table(dt,
file = paste0("loosenedRestrictionsGenes.txt"),
sep = "\t",
row.names = F,
quote = FALSE)
getwd()
setwd("../../Documents/GitHub/neand_sQTL/results/")
fread("loosenedRestrictionsGenes.txt")
test <- fread("loosenedRestrictionsGenes.txt")
table(test)
?table
test
table(dt)
as.data.frame(table(unlist(test)))
as.data.frame(table(unlist(test$gene_name)))
as.data.frame(table(unlist(test$seqnames)))
